


<configuration>


    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="7"/>
    <property name="totalSizeCap" value="3GB"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoders are assigned the type
             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
        <encoder>
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss} [%p][%c][%M][%L]-> %m%n</pattern>-->
            <!--
             %d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，
                 输出类似：2002年10月18日 22：10：28，921
             %p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
             %c   输出所属的类目，通常就是所在类的全名
             %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
             %t 输出产生该日志事件的线程名
             %m 输出代码中指定的消息
             %n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
             -->
            <pattern>%d{HH:mm:ss,SSS} [%p][%c][%t]%L -> %m%n</pattern>
        </encoder>
    </appender>


    <appender name="ErrorFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/errorLogFile.log</file>
        <append>true</append>
        <charset>UTF-8</charset>

        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>


        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>errorLogFile.%d{yyyy-MM-dd}.log</fileNamePattern>

            <!-- keep 30 days' worth of history capped at 3GB total size -->
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>${totalSizeCap}</totalSizeCap>

        </rollingPolicy>

        <encoder>
            <!--
              %d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，
                  输出类似：2002年10月18日 22：10：28，921
              %p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
              %c   输出所属的类目，通常就是所在类的全名
              %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
              %t 输出产生该日志事件的线程名
              %m 输出代码中指定的消息
              %n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
              -->
            <pattern>%d{HH:mm:ss,SSS} [%p][%c][%t]%L -> %m%n</pattern>
        </encoder>
    </appender>






    <appender name="infoFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/infoFile.log</file>
        <append>true</append>
        <charset>UTF-8</charset>

        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>


        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>infoFile.%d{yyyy-MM-dd}.log</fileNamePattern>

            <!-- keep 30 days' worth of history capped at 3GB total size -->
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>${totalSizeCap}</totalSizeCap>

        </rollingPolicy>

        <encoder>
            <!--
              %d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，
                  输出类似：2002年10月18日 22：10：28，921
              %p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
              %c   输出所属的类目，通常就是所在类的全名
              %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
              %t 输出产生该日志事件的线程名
              %m 输出代码中指定的消息
              %n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
              -->
            <pattern>%d{HH:mm:ss,SSS} [%p][%c][%t]%L -> %m%n</pattern>
        </encoder>
    </appender>





    <appender name="businessFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/businessFile.log</file>
        <append>true</append>
        <charset>UTF-8</charset>



        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>businessFile.%d{yyyy-MM-dd}.log</fileNamePattern>

            <!-- keep 30 days' worth of history capped at 3GB total size -->
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>${totalSizeCap}</totalSizeCap>

        </rollingPolicy>

        <encoder>
            <!--
              %d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，
                  输出类似：2002年10月18日 22：10：28，921
              %p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
              %c   输出所属的类目，通常就是所在类的全名
              %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
              %t 输出产生该日志事件的线程名
              %m 输出代码中指定的消息
              %n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
              -->
            <pattern>%d{HH:mm:ss,SSS} [%p][%c][%t]%L -> %m%n</pattern>
        </encoder>
    </appender>

    <!-- 不同的业务逻辑日志打印到指定文件夹-->
    <logger name="businessFile" additivity="false" level="DEBUG">
        <appender-ref ref="businessFileAppender"/>
    </logger>

    <!--	<logger name="org.springframework" level="ERROR" />
        -->
    <root level="INFO">

        <appender-ref ref="STDOUT" />
        <appender-ref ref="ErrorFile" />
        <appender-ref ref="infoFile" />
    </root>
</configuration>
